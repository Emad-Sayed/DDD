// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.ProductCatalog;

namespace Persistence.ProductCatalog.Migrations
{
    [DbContext(typeof(ProductCatalogContext))]
    [Migration("20200530135312_SeedBrandAndProductCategoryData")]
    partial class SeedBrandAndProductCategoryData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.ProductCatalog.AggregatesModel.BrandAggregate.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dec04667-6960-4842-9002-0db125500ddd"),
                            CreatedDateUtc = new DateTime(2020, 5, 30, 13, 53, 11, 744, DateTimeKind.Utc).AddTicks(9732),
                            Name = "Brand 1"
                        },
                        new
                        {
                            Id = new Guid("950f5ce4-b5e5-46e6-8e20-3f2b750da635"),
                            CreatedDateUtc = new DateTime(2020, 5, 30, 13, 53, 11, 745, DateTimeKind.Utc).AddTicks(4094),
                            Name = "Brand 2"
                        });
                });

            modelBuilder.Entity("Domain.ProductCatalog.AggregatesModel.ProductAggregate.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AvailableToSell")
                        .HasColumnType("bit");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.ProductCatalog.AggregatesModel.ProductAggregate.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ContentCount")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvilable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("SellingPrice")
                        .HasColumnType("real");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Domain.ProductCatalog.AggregatesModel.ProductCategoryAggregate.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db0e795e-5a01-4a19-9814-8b8d24e64202"),
                            CreatedDateUtc = new DateTime(2020, 5, 30, 13, 53, 11, 748, DateTimeKind.Utc).AddTicks(8226),
                            Name = "ProductCategory 1"
                        },
                        new
                        {
                            Id = new Guid("213395b5-7a8e-42b7-bbb3-05db816e016f"),
                            CreatedDateUtc = new DateTime(2020, 5, 30, 13, 53, 11, 748, DateTimeKind.Utc).AddTicks(9755),
                            Name = "ProductCategory 2"
                        });
                });

            modelBuilder.Entity("Domain.ProductCatalog.AggregatesModel.ProductAggregate.Product", b =>
                {
                    b.HasOne("Domain.ProductCatalog.AggregatesModel.BrandAggregate.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ProductCatalog.AggregatesModel.ProductCategoryAggregate.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.ProductCatalog.AggregatesModel.ProductAggregate.Unit", b =>
                {
                    b.HasOne("Domain.ProductCatalog.AggregatesModel.ProductAggregate.Product", "Product")
                        .WithMany("Units")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
