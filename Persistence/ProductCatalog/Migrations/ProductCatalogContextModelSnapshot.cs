// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.ProductCatalog;

namespace Persistence.ProductCatalog.Migrations
{
    [DbContext(typeof(ProductCatalogContext))]
    partial class ProductCatalogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.ProductCatalog.AggregatesModel.BrandAggregate.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9de2a9e6-867e-4051-9c20-98f97699c697"),
                            CreatedDateUtc = new DateTime(2020, 6, 14, 9, 28, 52, 514, DateTimeKind.Utc).AddTicks(5689),
                            Name = "Brand 1"
                        },
                        new
                        {
                            Id = new Guid("1ffd55cc-be56-46c5-8532-2726f878fc71"),
                            CreatedDateUtc = new DateTime(2020, 6, 14, 9, 28, 52, 514, DateTimeKind.Utc).AddTicks(7802),
                            Name = "Brand 2"
                        });
                });

            modelBuilder.Entity("Domain.ProductCatalog.AggregatesModel.ProductAggregate.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AvailableToSell")
                        .HasColumnType("bit");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.ProductCatalog.AggregatesModel.ProductAggregate.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ContentCount")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("SellingPrice")
                        .HasColumnType("real");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Domain.ProductCatalog.AggregatesModel.ProductCategoryAggregate.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("460ef8c6-22c4-4a4d-9c20-8ef253ff5c3b"),
                            CreatedDateUtc = new DateTime(2020, 6, 14, 9, 28, 52, 516, DateTimeKind.Utc).AddTicks(5428),
                            Name = "ProductCategory 1"
                        },
                        new
                        {
                            Id = new Guid("509c00ae-6ec9-4cff-8a90-41c3593ed395"),
                            CreatedDateUtc = new DateTime(2020, 6, 14, 9, 28, 52, 516, DateTimeKind.Utc).AddTicks(6205),
                            Name = "ProductCategory 2"
                        });
                });

            modelBuilder.Entity("Domain.ProductCatalog.AggregatesModel.ProductAggregate.Product", b =>
                {
                    b.HasOne("Domain.ProductCatalog.AggregatesModel.BrandAggregate.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ProductCatalog.AggregatesModel.ProductCategoryAggregate.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.ProductCatalog.AggregatesModel.ProductAggregate.Unit", b =>
                {
                    b.HasOne("Domain.ProductCatalog.AggregatesModel.ProductAggregate.Product", "Product")
                        .WithMany("Units")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
